import time
import numpy


t = cxn.timeresolvedfpga
t.set_time_length(0.045)
t.perform_time_resolved_measurement()
res = t.get_result_of_measurement()
complength = res[0][0]
timelength = res[0][1]

print complength
print timelength

arr = res[1].asarray

positions = arr[0];
elems = arr[1];

#this process is much faster but equilvant to 
#bitarray.fromstring(raw)
#arr.array(b)

result = numpy.zeros(( complength, 16), dtype = numpy.uint8)

#goes from 255 to [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1]
def converter(x):
	str = bin(x)[2:].zfill(16)
	l = [int(s) for s in str]
	return l

elems = map(converter , elems);
result[positions] = elems
result = result.flatten()

fft = numpy.fft.rfft(result) #returns nice form, faster than fft for real inputs

timestep = 5*10**-9 #nanoseconds, ADD this to server

freqs = numpy.fft.fftfreq(result.size, d = timestep)
freqs = numpy.abs(freqs[0:result.size/2 + 1])


ampl = numpy.abs(fft)
import matplotlib
matplotlib.use('Qt4Agg')
from matplotlib import pyplot
pyplot.plot(freqs, ampl)
pyplot.show()

#from scipy.sparse import lil_matrix
#from scipy.fftpack import rfft